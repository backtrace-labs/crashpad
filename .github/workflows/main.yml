name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "backtrace" branch
  push:
    branches: [ "cmake-temp" ]
  pull_request:
    branches: [ "cmake-temp" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      # Install latest CMake.
      - uses: lukka/get-cmake@latest
      
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          
      - name: Install curl headers
        run: sudo apt-get install -y libcurl4-openssl-dev

      - name: CMake
        run: |
          mkdir cbuild
          cmake -S . -B cbuild/ 
          cmake --build cbuild/

      - name: Tar files to preserve file permissions
        run: tar -cvzf Archive_Crashpad_Linux_build_${{ github.ref_name }}.tar.gz cbuild/

      - uses: actions/upload-artifact@v3
        with:
          name: Archive_Crashpad_Linux_build_${{ github.ref_name }}
          path: Archive_Crashpad_Linux_build_${{ github.ref_name }}.tar.gz

  build-windows:
    # Because we want to use Visual Studio 16 2019, we need to use the windows-2019 GitHub runner
    runs-on: windows-2019
    steps:
      # Install latest CMake.
      - uses: lukka/get-cmake@latest
      
      - uses: actions/checkout@v2
        with:
          submodules: recursive

#       - name: Install curl (windows)
#        #if: matrix.os == 'windows-latest'
#         run: |
#          choco install -y cygwin
#          choco install -y cyg-get
#          cyg-get -debug curl libcurl-devel findutils tar
#          refreshenv
#          which tar
#          c:\tools\cygwin\bin\find.exe c:\tools\cygwin\ -name "curl.*" || true

      - name: CMake
        run: |
          # make a build directory (note: build is already used by Crashpad)
          mkdir cbuild
          
          # run CMake (additional options like -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE are possible)
          # it is recommended to specify the compiler version used for the build
          # -DCURL_INCLUDE_DIR=c:\tools\cygwin\usr\include\curl\ -DCURL_LIBRARY=c:\tools\cygwin\bin\
          cmake -S . -B cbuild/  -G "Visual Studio 16 2019"
          cmake --build cbuild/
        
      #- name: Tar files to preserve file permissions
      #  run: tar -cvzf Archive_Crashpad_Windows_build_${{ github.ref_name }}.tar.gz cbuild/

      - uses: actions/upload-artifact@v3
        with:
          name: Archive_Crashpad_Windows_build_${{ github.ref_name }}
          path: cbuild/

  
  build-macos:
    runs-on: macos-latest
    steps:
      # Install latest CMake.
      - uses: lukka/get-cmake@latest
      
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: CMake
        run: | 
          mkdir cbuild
          cmake -S . -B cbuild/ 
          cmake --build cbuild/
        
      - name: Tar files to preserve file permissions
        run: tar -cvzf Archive_Crashpad_MacOs_build_${{ github.ref_name }}.tar.gz cbuild/

      - uses: actions/upload-artifact@v3
        with:
          name: Archive_Crashpad_MacOs_build_${{ github.ref_name }}
          path: Archive_Crashpad_MacOs_build_${{ github.ref_name }}.tar.gz

  build-android:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        # supported are: armeabi-v7a, arm64-v8a, x86_64. x86 (32-bit) is NOT supported
        abi: [armeabi-v7a, arm64-v8a, x86_64]
        # 64 bit architectures will always have min API level 21 https://stackoverflow.com/a/56467008
        apiLevel: [21, 32]
        include:
          - apiLevel: 16
            abi: armeabi-v7a

    steps:
      # Install latest CMake.
      - uses: lukka/get-cmake@latest
      
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          
      - name: Install curl headers
        run: sudo apt-get install -y libcurl4-openssl-dev

      - name: CMake
        run: |
          mkdir cbuild 
          cmake -S . -B cbuild/ -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=${{ matrix.abi }} -DANDROID_PLATFORM=${{ matrix.apiLevel }} -DANDROID_NATIVE_API_LEVEL=${{ matrix.apiLevel }} -DANDROID_TOOLCHAIN=clang
          cmake --build cbuild/

      - name: Tar files to preserve file permissions
        run: tar -cvzf Archive_Crashpad_Android_apiLevel${{ matrix.apiLevel }}_${{ matrix.abi }}_build_${{ github.ref_name }}.tar.gz cbuild/

      - uses: actions/upload-artifact@v3
        with:
          name: Archive_Crashpad_Android_apiLevel${{ matrix.apiLevel }}_${{ matrix.abi }}_build_${{ github.ref_name }}
          path: Archive_Crashpad_Android_apiLevel${{ matrix.apiLevel }}_${{ matrix.abi }}_build_${{ github.ref_name }}.tar.gz 

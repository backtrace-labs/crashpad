# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "backtrace" branch
  push:
    branches: [ "cmake-temp" ]
  pull_request:
    branches: [ "cmake-temp" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      # Install latest CMake.
      - uses: lukka/get-cmake@latest
      
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          
      - name: Install curl headers
        run: sudo apt-get install -y libcurl4-openssl-dev

      - name: CMake
        run: mkdir cbuild && cd cbuild && cmake .. && make -j && cd ..

      - name: Tar files to preserve file permissions
        run: tar -cvzf Archive_Crashpad_Linux_build_${{ github.ref_name }}.tar.gz cbuild/

      - uses: actions/upload-artifact@v3
        with:
          name: Archive_Crashpad_Linux_build_${{ github.ref_name }}
          path: Archive_Crashpad_Linux_build_${{ github.ref_name }}.tar.gz

  build-windows:
    runs-on: windows-2019
    steps:
      # Install latest CMake.
      - uses: lukka/get-cmake@latest
      
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install curl (windows)
       #if: matrix.os == 'windows-latest'
        run: |
         choco install -y cygwin
         choco install -y cyg-get
         cyg-get -debug curl libcurl-devel

      - name: CMake
        run: |
          # make a build directory (note: build is already used by Crashpad)
          mkdir -p cbuild && cd cbuild
          # run CMake (additional options like -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE are possible)
          # it is recommended to specify the compiler version used for the build
          cmake -G "Visual Studio 16 2019" ..
          cmake --build .
          cd ..
          # mkdir cbuild && cd cbuild && cmake -DCURL_LIBRARY=/usr/lib/ -DCURL_INCLUDE_DIR=/usr/include/curl/ .. && make -j && cd ..
        
      - name: Tar files to preserve file permissions
        run: tar -cvzf Archive_Crashpad_Windows_build_${{ github.ref_name }}.tar.gz cbuild/

      - uses: actions/upload-artifact@v3
        with:
          name: Archive_Crashpad_Windows_build_${{ github.ref_name }}
          path: Archive_Crashpad_Windows_build_${{ github.ref_name }}.tar.gz

  
  build-macos:
    runs-on: macos-latest
    steps:
      # Install latest CMake.
      - uses: lukka/get-cmake@latest
      
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: CMake
        run: mkdir cbuild && cd cbuild && cmake .. && make -j && cd ..
        
      - name: Tar files to preserve file permissions
        run: tar -cvzf Archive_Crashpad_MacOs_build_${{ github.ref_name }}.tar.gz cbuild/

      - uses: actions/upload-artifact@v3
        with:
          name: Archive_Crashpad_MacOs_build_${{ github.ref_name }}
          path: Archive_Crashpad_MacOs_build_${{ github.ref_name }}.tar.gz

  build-android:
    env: 
      ANDROID_API_LEVEL: 23
      ANDROID_EMULATOR_LEVEL: 23
      ANDROID_BUILD_TOOLS_VERSION: 28.0.3
      ANDROID_TAG: google_apis
      ADB_INSTALL_TIMEOUT: 20
      # note that you will have to adjust those paths to your installation
      SDK_HOME: /home/backtrace/code/android/sdk
      PATH: ${SDK_HOME}/cmake/3.18.1/bin/:$PATH
      CMAKE: ${SDK_HOME}/cmake/3.18.1/bin/cmake
      ANDROID_HOME: ${SDK_HOME}
      NDK_VERSION: 21.4.7075529
      NDK: ${ANDROID_HOME}/ndk/${NDK_VERSION}
      TOOLCHAIN: ${SDK_HOME}/ndk/${NDK_VERSION}/build/cmake/android.toolchain.cmake
      GTEST: ${NDK}/sources/third_party/googletest
      # other supported are: arm64-v8a, x86_64. x86 (32-bit) is NOT supported
      ABI: armeabi-v7a
    
    runs-on: macos-latest # necessary for reactivecircus/android-emulator-runner@v2

    steps:
      - uses: actions/checkout@v2

      - name: Checkout submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Test
        uses: reactivecircus/android-emulator-runner@v2
        with:
          target: google_apis
          api-level: 30
          ndk: 21.4.7075529
          arch: x86_64
          script: |
            # make a build directory (note: build is already used by Crashpad)
            mkdir -p cbuild && cd cbuild
            # run CMake (additional options like -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE are possible)
            cmake \
                    -DANDROID_ABI=${ABI} \
                    -DANDROID_PLATFORM=${API_VERSION} \
                    -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN} \
                    -DANDROID_NATIVE_API_LEVEL=${ANDROID_API_LEVEL} \
                    -DANDROID_TOOLCHAIN=clang \
                    ..
            # build
            make -j
            cd ..
